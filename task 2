<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch</title>
    <link rel="stylesheet" href="stopwatch.css">
</head>
<body>
    <div class="stopwatch">
        <div class="display">00:00:00.0</div>
        <div class="buttons">
            <button id="startStopBtn">Start</button>
            <button id="resetBtn">Reset</button>
            <button id="lapBtn">Lap</button>
        </div>
        <div class="laps">
            <ul id="lapsList"></ul>
        </div>
    </div>
    <script src="stopwatch.js"></script>
</body>
</html>

js

// script.js
let startTime = 0;
let elapsedTime = 0;
let intervalId;
let running = false;
let lapCount = 0;

const display = document.querySelector('.display');
const startStopBtn = document.getElementById('startStopBtn');
const resetBtn = document.getElementById('resetBtn');
const lapBtn = document.getElementById('lapBtn');
const lapsList = document.getElementById('lapsList');

function formatTime(time) {
    const date = new Date(time);
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    const milliseconds = String(Math.floor(date.getMilliseconds() / 100)).padStart(1, '0');
    return `${minutes}:${seconds}.${milliseconds}`;
}

function updateDisplay() {
    display.textContent = formatTime(elapsedTime);
}

function startStopwatch() {
    startTime = Date.now() - elapsedTime;
    intervalId = setInterval(() => {
        elapsedTime = Date.now() - startTime;
        updateDisplay();
    }, 100);
}

function stopStopwatch() {
    clearInterval(intervalId);
}

startStopBtn.addEventListener('click', () => {
    if (running) {
        stopStopwatch();
        startStopBtn.textContent = 'Start';
    } else {
        startStopwatch();
        startStopBtn.textContent = 'Stop';
    }
    running = !running;
});

resetBtn.addEventListener('click', () => {
    stopStopwatch();
    running = false;
    elapsedTime = 0;
    lapCount = 0;
    startStopBtn.textContent = 'Start';
    updateDisplay();
    lapsList.innerHTML = '';
});

lapBtn.addEventListener('click', () => {
    if (running) {
        lapCount++;
        const lapTime = document.createElement('li');
        lapTime.textContent = `Lap ${lapCount}: ${formatTime(elapsedTime)}`;
        lapsList.appendChild(lapTime);
    }
});

// Initialize display
updateDisplay();

css

/* styles.css */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
 background-image: 
                url('stopwatch.jpg');
    background-size: cover; /* Cover the entire element */
    background-repeat: no-repeat; /* Prevent the image from repeating */
    background-position: center; /* Center the image */
}
}

.stopwatch {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.display {
    font-size: 48px;
    margin-bottom: 20px;
}

.buttons button {
    font-size: 16px;
    margin: 5px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.buttons button:hover {
    background-color: #ddd;
}

.laps {
    margin-top: 20px;
}

.laps ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.laps ul li {
    font-size: 18px;
    margin: 5px 0;
}
